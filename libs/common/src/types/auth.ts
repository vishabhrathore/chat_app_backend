// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

/** User entity. */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  about: string;
  avatar: string;
  email: string;
  verified: boolean;
  socketId: string;
  status: string;
  /** List of user IDs. */
  friends: string[];
  createdAt: string;
  updatedAt: string;
}

/** Request and response messages. */
export interface CreateUserRequest {
  firstName: string;
  lastName: string;
  about: string;
  avatar: string;
  email: string;
  password: string;
}

export interface UpdateUserRequest {
  id: string;
  firstName: string;
  lastName: string;
  about: string;
  avatar: string;
  email: string;
  password: string;
  status: string;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface DeleteUserRequest {
  id: string;
}

export interface AuthenticateUserRequest {
  email: string;
  password: string;
}

export interface VerifyOTPRequest {
  email: string;
  otp: string;
}

export interface StreamUserListRequest {
  /** Optional filter criteria (e.g., status, verified users, etc.). */
  filter: string;
}

export interface UserResponse {
  user: User | undefined;
}

export interface AuthenticationResponse {
  token: string;
  user: User | undefined;
}

export interface VerifyOTPResponse {
  success: boolean;
}

export interface EmptyResponse {}

export const AUTH_PACKAGE_NAME = 'auth';

/** The user service definition. */

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<UserResponse>;
  // getUserList(request: GetUserByIdRequest): Observable<UserResponse>;


  getUserById(request: GetUserByIdRequest): Observable<UserResponse>;

  // updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  // deleteUser(request: DeleteUserRequest): Observable<EmptyResponse>;

  // authenticateUser(
  //   request: AuthenticateUserRequest,
  // ): Observable<AuthenticationResponse>;

  // verifyOtp(request: VerifyOTPRequest): Observable<VerifyOTPResponse>;

  // streamUserList(request: StreamUserListRequest): Observable<User>;
}

/** The user service definition. */

export interface UserServiceController {
  createUser(
    request: CreateUserRequest,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  // getUserList(request: GetUserByIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;


  getUserById(request: GetUserByIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  // updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  // deleteUser(request: DeleteUserRequest): Promise<EmptyResponse> | Observable<EmptyResponse> | EmptyResponse;

  // authenticateUser(
  //   request: AuthenticateUserRequest,
  // ): Promise<AuthenticationResponse> | Observable<AuthenticationResponse> | AuthenticationResponse;

  // verifyOtp(request: VerifyOTPRequest): Promise<VerifyOTPResponse> | Observable<VerifyOTPResponse> | VerifyOTPResponse;

  // streamUserList(request: StreamUserListRequest): Observable<User>;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUser',
      // 'getUserById',

      'getUserById',
      // 'updateUser',
      // 'deleteUser',
      // 'authenticateUser',
      // 'verifyOtp',
      // 'streamUserList',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
