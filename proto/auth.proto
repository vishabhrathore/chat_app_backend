syntax = "proto3";

package auth;

// The user service definition.
service UserService {
  rpc CreateUser (CreateUserRequest) returns (UserResponse);
  rpc GetUserById (GetUserByIdRequest) returns (UserResponse);
  rpc UpdateUser (UpdateUserRequest) returns (UserResponse);
  rpc DeleteUser (DeleteUserRequest) returns (EmptyResponse);
  rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticationResponse);
  rpc VerifyOTP (VerifyOTPRequest) returns (VerifyOTPResponse);
  rpc StreamUserList (StreamUserListRequest) returns (stream User);
}

// User entity.
message User {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string about = 4;
  string avatar = 5;
  string email = 6;
  bool verified = 7;
  string socket_id = 8;
  string status = 9;
  repeated string friends = 10; // List of user IDs.
  string created_at = 11;
  string updated_at = 12;
}

// Request and response messages.
message CreateUserRequest {
  string first_name = 1;
  string last_name = 2;
  string about = 3;
  string avatar = 4;
  string email = 5;
  string password = 6;
}

message UpdateUserRequest {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string about = 4;
  string avatar = 5;
  string email = 6;
  string password = 7;
  string status = 8;
}

message GetUserByIdRequest {
  string id = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message AuthenticateUserRequest {
  string email = 1;
  string password = 2;
}

message VerifyOTPRequest {
  string email = 1;
  string otp = 2;
}

message StreamUserListRequest {
  string filter = 1; // Optional filter criteria (e.g., status, verified users, etc.).
}

message UserResponse {
  User user = 1;
}

message AuthenticationResponse {
  string token = 1;
  User user = 2;
}

message VerifyOTPResponse {
  bool success = 1;
}

message EmptyResponse {}
